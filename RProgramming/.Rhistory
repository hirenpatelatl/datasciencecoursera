setwd("GitHub/datasciencecoursera/RProgramming")
x <- matrix(rnorm(200), 20, 10)
x
apply(x,1,sum)
apply(x,2,sum)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a,dims=2)
rnorm ( 2 * 2 * 10)
mapply(rep, 1:4, 4:1)
noise <-function(n, mean, sd) {}
rnorm(n,mean,sd)
noise <-function(n, mean, sd) {
rnorm(n,mean,sd)}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise, 1:5, 1:5, 2)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
head(s)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
airquality$Month
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
gl(2,5)
gl(5,2)
x <- rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
?debug
mean(z)
traceback()
source("Clear-R-Env.R")
ls()
source("Swirl-Setup.R")
source("Swirl-Setup.R")
install.packages("swirl")
source('~/GitHub/datasciencecoursera/RProgramming/Clear-R-Env.R')
library(swirl)
install_from_swirl("R Programming")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
play()
lapply(flags, length)
nxt()
cls(cls_list)
class(cls_list)
as.character(cls_list)
?saplly
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
unique_vals <- sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
iris
head(iris)
tapply(iris$Sepal.Length,iris$Species, summary)
rowMeans(iris[,1:4])
?apply
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,summary)
round(192.5-91)
debug(ls)
ls
ls()
ls()
